{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","props","state","name","handleChange","bind","handleSubmit","e","this","setState","target","value","preventDefault","newTodo","id","uuid","create","onSubmit","className","type","onChange","Component","Todo","editMode","completion","changeEditMode","finishEditing","changeCompletion","edit","todoContent","onClick","completionClass","remove","TodoList","todos","createTodo","removeTodo","editTodo","todo","filter","updatedName","updatedTodos","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2753f4cf.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport \"./NewTodoForm.css\"\nimport uuid from \"uuid/v4\"\n\nclass NewTodoForm extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e){\n        e.preventDefault()\n        const newTodo = {...this.state, id: uuid()}\n        this.props.create(newTodo)\n        this.setState({\n            name: \"\"\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <h2>Enter a new Todo</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <input className={\"NewTodoForm-txt\"} name={\"name\"} type={\"text\"} value={this.state.name} onChange={this.handleChange}/>\n                    <button className={\"NewTodoForm-btn\"}>Add Todo</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default NewTodoForm","import React, {Component} from \"react\"\nimport \"./Todo.css\"\n\nclass Todo extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            editMode: false,\n            name: this.props.name,\n            completion: false,\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.changeEditMode = this.changeEditMode.bind(this)\n        this.finishEditing = this.finishEditing.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.changeCompletion = this.changeCompletion.bind(this)\n    }\n\n    handleSubmit(e){\n        e.preventDefault()\n    }\n\n    changeEditMode(e){\n        this.setState({\n            editMode: !this.state.editMode\n        })\n    }\n\n    changeCompletion(e){\n        this.setState({\n            completion: !this.state.completion\n        })\n    }\n\n    finishEditing(e){\n        if (this.state.editMode){\n            this.props.edit(this.props.id, this.state.name)\n            this.changeEditMode()\n        }\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render(){\n        var todoContent\n        if (this.state.editMode){\n            todoContent = (\n                <form className={\"Todo\"} onSubmit={this.handleSubmit}>\n                    <input className={\"Todo-name\"} type={\"text\"} value={this.state.name} name={\"name\"} onChange={this.handleChange} />\n                    <button className={\"Todo-edit\"} onClick={this.finishEditing}>Done</button>\n                </form>\n            )\n        } else {\n            const completionClass = this.state.completion ? \" completed\" : \"\"\n            todoContent = (\n                <form className={\"Todo\" + completionClass} onSubmit={this.handleSubmit} onClick={this.changeCompletion}>\n                    <p className={\"Todo-name\"}>{this.props.name}</p>\n                    <button className={\"Todo-delete\"} onClick={this.props.remove}><i className=\"fa fa-trash\"/></button>\n                    <button className={\"Todo-edit\"} onClick={this.changeEditMode}>Edit</button>\n                </form>\n            )\n        }\n        return todoContent\n    }\n}\n\nexport default Todo","import React, {Component} from \"react\"\nimport NewTodoForm from \"./NewTodoForm\";\nimport Todo from \"./Todo\";\n\nclass TodoList extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        }\n        this.createTodo = this.createTodo.bind(this)\n        this.removeTodo = this.removeTodo.bind(this)\n        this.editTodo = this.editTodo.bind(this)\n    }\n\n    createTodo(todo){\n        this.setState({\n            todos: [...this.state.todos, todo]\n        })\n    }\n\n    removeTodo(id){\n        this.setState({\n            todos: this.state.todos.filter(todo => (\n                todo.id !== id\n            ))\n        })\n    }\n\n    editTodo(id, updatedName){\n        // create a new variable equal to a copy of all the current todos\n        // loop through these todos until you come across the desired to-do\n        // return a new to-do with the same props as before with the name value equal to the new name\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return {...todo, name: updatedName};\n            }\n            return todo;\n        });\n        this.setState({\n            todos: updatedTodos\n        })\n    }\n\n    render(){\n        const todos = this.state.todos.map(todo => (\n            <Todo\n                key={todo.id}\n                id={todo.id}\n                name={todo.name}\n                remove={() => this.removeTodo(todo.id)}\n                edit={this.editTodo}\n            />\n        ))\n\n        return(\n            <div>\n                <NewTodoForm create={this.createTodo}/>\n                {todos}\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import './App.css';\nimport TodoList from \"./TodoList\";\n// import BoxList from \"./BoxList\";\n// import Box from \"./Box\";\n\nfunction App() {\n  return (\n      <div className={\"App\"}>\n        <TodoList/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}